(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{206:function(e,t,a){"use strict";a.r(t);var n=a(0),v=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vue题库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue题库","aria-hidden":"true"}},[e._v("#")]),e._v(" Vue题库")]),e._v(" "),a("h2",{attrs:{id:"参考网址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考网址","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考网址")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016351284",target:"_blank",rel:"noopener noreferrer"}},[e._v("81道vue经典面试题"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"vuex是什么？怎么使用？哪种场景下使用？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex是什么？怎么使用？哪种场景下使用？","aria-hidden":"true"}},[e._v("#")]),e._v(" VueX是什么？怎么使用？哪种场景下使用？")]),e._v(" "),a("p",[e._v("​\t为vue构建的状态集管理工具，组件间进行通信，兄弟组件可以用eventBus,适合大型项目中使用")]),e._v(" "),a("p",[e._v("VueX是什么？")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("专门为vue构建的状态集管理")])]),e._v(" "),a("li",[a("p",[e._v("解决组件间状态共享问题")])]),e._v(" "),a("li",[a("p",[e._v("强调的是集中式管理")])]),e._v(" "),a("li",[a("p",[e._v("说白了 主要是便于维护 便于解耦 所以不是所有的项目s适用vuex")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("解耦，字面意思就是解除耦合关系。\n耦合是指两个或两个以上的体系或两种运动形式间通过相互作用而彼此影响以至联合起来的现象。比如对象之间\n")])])])]),e._v(" "),a("li",[a("p",[e._v("如果不是构建大型项目使用vuex 反而使项目代码繁琐多余")])])]),e._v(" "),a("p",[e._v("怎么使用？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("state    存放数据\nmutation 更新状态\ngetters  相当于计算属性\nactions  将数据传给mutation\nmodules  拆分仓库\n\nvar staore = new Vuex.staore({\n    state:{\n        count:0\n    },\n    mutation:{\n        addState:fuction(state){\n        \tstate.count++;\n        \t// 使用： store.commit('addState')\n        },\n        reduceState:fuction(state){\n        \tstate.count--;\n        }\n    }\n})\n")])])]),a("p",[e._v("哪种场景下使用？")]),e._v(" "),a("p",[e._v("创建组件，弹窗表单组件，数据可以通过vuex去管理。")]),e._v(" "),a("h2",{attrs:{id:"四个vue中指令和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四个vue中指令和方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 四个vue中指令和方法")]),e._v(" "),a("ol",[a("li",[e._v("v-if 条件渲染指令 代表存在销毁")]),e._v(" "),a("li",[e._v("v-bind 绑定指令 用来绑定属性 简写：")]),e._v(" "),a("li",[e._v("v-on 坚持事件指令 简写@")]),e._v(" "),a("li",[e._v("v-for 循环指令")])]),e._v(" "),a("h2",{attrs:{id:"导航钩子有哪些？有哪些参数？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导航钩子有哪些？有哪些参数？","aria-hidden":"true"}},[e._v("#")]),e._v(" 导航钩子有哪些？有哪些参数？")]),e._v(" "),a("p",[e._v("导航钩子有哪些？")]),e._v(" "),a("p",[e._v("实现一个路由守卫功能。")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("翻译过来就是关于路由生命周期函数")])]),e._v(" "),a("li",[a("p",[e._v("分为全局式和局部式两种：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("beforeEach:在路由切换开始调用\nafterEach:在路由切换离开时调用\n局部到单个路由\nbeforeEnter\n组件钩子函数\nbeforeRouterEnter,\nbeforeRouterUpdate,\nbeforeRouterLeave\n\n怎么使用？\nconst router = new VueRoute({\n    routes:routes\n})\n\nconst routes = [\n    {\n        path:'/',\n        name:'/',\n        component:Home,\n        meta: {\n            auth:true\n        }\n    }\n]\n\n针对全局：\nrouter.beforeEnter((to,form.next)=>{\n    if (to.meta.auth) {\n        if () {\n            next()\n        } else {\n            next({\n                path:'/login/'\n            })\n        }\n    }\n})\n局部的\n{\n   path:'/',\n   name:'/',\n   component:Home,\n   beforeEnter:function(){\n       \n   }\n}\n单个组件\n直接和created()同级使用即可，\n\nto：即将进入目标对象\nfrom：当前导航要离开的导航对象\nnext: 一个函数，调resolve执行下一步\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"v-model是什么？标签怎么绑定事件？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-model是什么？标签怎么绑定事件？","aria-hidden":"true"}},[e._v("#")]),e._v(" v-model是什么？标签怎么绑定事件？")]),e._v(" "),a("p",[e._v("v-model是什么？")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("vue中利用v-model来进行表单数据的双向绑定")])]),e._v(" "),a("li",[a("p",[e._v("说白了就是做了两个操作：")]),e._v(" "),a("p",[e._v("v-bind 绑定一个value属性")]),e._v(" "),a("p",[e._v("利用v-on 把当前元素绑定到一个事件上")])])]),e._v(" "),a("h2",{attrs:{id:"什么是vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是vue","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是vue?")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("由饿了么ued团队维护的一个渐进式js框架")])]),e._v(" "),a("li",[a("p",[e._v("是mvvm框架")])]),e._v(" "),a("li",[a("p",[e._v("如何使用vue去构建项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vue-cli脚手架工具构建项目\n直接引入vue.js进行项目的构建\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Vue生命周期详解")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("分为四个阶段：\n组件创建时 created\n模板渲染时 beforeMount(dom操作) mounted\n组件更新时 uptated\n组件卸载时 destroy\n\n\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"vue组件封装过程以及如何封装？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件封装过程以及如何封装？","aria-hidden":"true"}},[e._v("#")]),e._v(" vue组件封装过程以及如何封装？")]),e._v(" "),a("p",[e._v("为什要封装组件？主要目的：为了解耦")]),e._v(" "),a("p",[e._v("通用组件必须具备高性能 高耦合 （往往我们还会在通用组件留一个插槽）")]),e._v(" "),a("h2",{attrs:{id:"axios是什么？怎么使用？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axios是什么？怎么使用？","aria-hidden":"true"}},[e._v("#")]),e._v(" axios是什么？怎么使用？")]),e._v(" "),a("p",[e._v("axios是什么？")]),e._v(" "),a("ol",[a("li",[e._v("是基于promise的用于浏览器和node.js的http的客户端")]),e._v(" "),a("li",[e._v("主要作用是向后台发送请求")]),e._v(" "),a("li",[e._v("支持promise")]),e._v(" "),a("li",[e._v("提供一些并发方法")]),e._v(" "),a("li",[e._v("提供拦截器")]),e._v(" "),a("li",[e._v("浏览器防止csrf(跨站请求伪造)")])]),e._v(" "),a("p",[e._v("axios fetch ajax区别？")]),e._v(" "),a("ol",[a("li",[e._v("前两者基于promise 后者主要还是利用callback形式")]),e._v(" "),a("li",[e._v("fetch 脱离 xhr 新语法 默认不传cookie 另外不想xhr 可以监听到请求进度。")])]),e._v(" "),a("h2",{attrs:{id:"swiper后台获取数据？css也没问题？但是图片不动怎么解决？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swiper后台获取数据？css也没问题？但是图片不动怎么解决？","aria-hidden":"true"}},[e._v("#")]),e._v(" swiper后台获取数据？css也没问题？但是图片不动怎么解决？")]),e._v(" "),a("h2",{attrs:{id:"vue路由懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue路由懒加载","aria-hidden":"true"}},[e._v("#")]),e._v(" vue路由懒加载")]),e._v(" "),a("p",[e._v("​\t延时加载，当你需要时加载，vue打包后都是引用一个js，所以需要懒加载，相对于大型项目而言。")]),e._v(" "),a("ol",[a("li",[e._v("会拆分js，这样根据不同功能加载js，节约时间")])]),e._v(" "),a("p",[e._v("如何使用？")]),e._v(" "),a("p",[e._v("就是异步组件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n    path:'/detail',\n    name:'detail',\n    component:detail\n}\n\n\n<router-link to='/detail'></router-link>\n\nfunction resolveView(view){\n    return ()=>import('@/components/${view}.vue')\n}\n\n{\n    path:'/detail',\n    name:'detail',\n    component:resolveView(detail)\n}\n")])])]),a("h2",{attrs:{id:"vue-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-loader","aria-hidden":"true"}},[e._v("#")]),e._v(" vue-loader")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("就是一个加载器，能把。vue组件转换成js模块")])]),e._v(" "),a("li",[a("p",[e._v("为什么要求去转义")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- 动态渲染一些数据\n- 对三个标签都做了优化 script 中直接使用es6 也默认可以使用sass\n- 并且还提供了作用域\n- 开发阶段提供热加载\n\n预加载需要强大服务器支持，提升用户体验 但是服务器有压力\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"用过插槽吗？具名还是匿名？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用过插槽吗？具名还是匿名？","aria-hidden":"true"}},[e._v("#")]),e._v(" 用过插槽吗？具名还是匿名？")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("是一个非常好的东西，slot 说白了就是一个占位的")])]),e._v(" "),a("li",[a("p",[e._v("包含三种 ：默认插槽（匿名）、具名插槽、作用域插槽")])])]),e._v(" "),a("p",[e._v("区别：")]),e._v(" "),a("ol",[a("li",[e._v("匿名插槽 就是没有名字，只要默认都填到这里")]),e._v(" "),a("li",[e._v("具名插槽 就是有名字的")]),e._v(" "),a("li",[e._v("匿名只能添加一个，具名可以添加多个")]),e._v(" "),a("li",[e._v("作用域插槽只作用当前slot")])]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('创建about.vue\n<div>\n\t<h2>关于插槽</h2>\n\t<slot name="head" say="holle"></slot>\n\t<slot></slot>\n\t<slot name="footer"></slot>\n</div>\n\n\n引入组件about.vue\n这样就可以用了，不加也没事，反正占位的\n<about>\n    <div slot="head" slot-scoped="aaa">\n\t  {{aaa}}这是头部\n\t</div>\n\t<h2>这是hollo word</h2>\n\t<div slot="footer">\n\t这是底部\n\t</div>\n</about>\n\n这样可以大大丰富通用组件\n')])])]),a("h2",{attrs:{id:"vue虚拟dom理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue虚拟dom理解","aria-hidden":"true"}},[e._v("#")]),e._v(" vue虚拟DOM理解")]),e._v(" "),a("p",[e._v("什么是虚拟DOM？")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("就是一段字符串，就是一个变量，真实DOM是DOM树，即以js的方式去添加DOM元素")])]),e._v(" "),a("li",[a("p",[e._v("本质上优化Diff算法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("新旧DOM对比 获取差异dom 一次性更新到真实DOM上\n")])])])]),e._v(" "),a("li",[a("p",[e._v("也有自己的缺陷：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- 更适合批量修改dom\n- 尽量不要跨层级修改dom\n- 设置key，可以最大的利用节点，没有key，直接创建新的节点\n")])])])]),e._v(" "),a("li",[a("p",[e._v("比真实DOM渲染速度快（不一定，只占90%）")])])]),e._v(" "),a("h2",{attrs:{id:"如何理解vue的mvvm模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解vue的mvvm模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何理解vue的mvvm模式")]),e._v(" "),a("p",[e._v("mvvm和mvc区别？")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("mvvm是mvc衍生")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mvc 指的是 model view controller,\ncontroller和model之间不能相互传，只能c传m\n\n缺点：不及时\n")])])])]),e._v(" "),a("li",[a("p",[e._v("mvvm 也分为三层 view viewModel  model")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("view和model之间没有任何联系 都是通过vm联系的\n")])])])]),e._v(" "),a("li",[a("p",[e._v("vue是专注于view和viewModel的框架 ，双向绑定思想")])])]),e._v(" "),a("h2",{attrs:{id:"keep-alive作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive作用","aria-hidden":"true"}},[e._v("#")]),e._v(" keep-alive作用")]),e._v(" "),a("p",[e._v("用来读取缓存的")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("说白了 能让不活动的组件活着")])]),e._v(" "),a("li",[a("p",[e._v("两种属性:include 与 exclude 允许组件有条件的缓存")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("实现原理：\n- 其实就是在 created时候 将需要缓存的vnode节点放在cache（keqi）中 在render的时候 根据 name 再进行取出。\n- 怎么使用？\n根据路由使用\n{\n    path:'/detail',\n    name:'detail',\n    component:detail，\n    meta:{\n        keepAlive:true// 允许缓存\n    }\n}\n\n来判断是否缓存\n<keep-alive>\n\t<router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"axios拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axios拦截器","aria-hidden":"true"}},[e._v("#")]),e._v(" axios拦截器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// http request 请求拦截器\naxios.interceptors.request.use(config => {\n\t// 在发送请求之前做些什么\n\tlet pathname = location.pathname;\n\tif(localStorage.getItem('token')){\n\t\tif(pathname != '/' &&  pathname != '/login'){\n\t\t\tconfig.headers.common['token'] = localStorage.getItem('token');\n\t\t}\n\t}\n\treturn config;\n}, error => {\n\t// 对请求错误做些什么\n\treturn Promise.reject(error);\n});\n")])])])])},[],!1,null,null,null);t.default=v.exports}}]);